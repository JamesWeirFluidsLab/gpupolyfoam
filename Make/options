//the file expects a variable USE_OMM passed along side wmake with either values
// mono|poly|water
// the solver will compile class relevant to type of solver specified
// as in atomistic - mono
// waterfield - water
// polyfield - poly

ifdef USE_OMM
 case = $(shell echo $(USE_OMM) | tr A-Z a-z )
 ucase = $(shell echo $(USE_OMM) | tr a-z A-Z )
 c++FLAGS+=-DUSE_OMM
 c++FLAGS+=-D$(ucase)
endif

EXE = $(FOAM_APPBIN)/gpuFoam
EXE_INC = \
     -I$(LIB_SRC)/finiteVolume/lnInclude \
    -I$(LIB_SRC)/meshTools/lnInclude \
    -I$(LIB_SRC)/lagrangian/basic/lnInclude \
    -I$(LIB_SRC)/lagrangian/molecularDynamics/polyField/lnInclude \
    -I$(LIB_SRC)/lagrangian/molecularDynamics/waterField/lnInclude \
    -I$(LIB_SRC)/lagrangian/molecularDynamics/molecularField/lnInclude \
    -I$(LIB_SRC)/lagrangian/molecularDynamics/atomisticField/lnInclude \
    -I$(LIB_SRC)/lagrangian/molecularDynamics/potential/lnInclude \
    -I$(LIB_SRC)/lagrangian/molecularDynamics/general/lnInclude \
    -I$(FOAM_OMM)/include \ 
    -I$(FOAM_OMM)/include/openmm \
    -I$(FOAM_OMM)/include/openmm/internal 
EXE_LIBS = \
    -lfiniteVolume \
    -lmeshTools \
    -llagrangian \
    -lpolyField \
    -lpotential \
    -lgeneralMolecule \
    -latomisticField \
    -lwaterField \
    -lmolecularField \
    -L$(FOAM_OMM)/lib \
    -lOpenMM
